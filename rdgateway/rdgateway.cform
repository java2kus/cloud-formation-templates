{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Microsoft RDGateway High Availability Bastion",
  "Parameters": {
    "ServiceName": {
      "Description": "Becomes the short hostname used in DNS, Naming, Comments, and other things.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default": "RDP"
    },
    "Environment": {
      "Description": "The Runtime Environment",
      "Type": "String",
      "Default": "Default",
      "AllowedValues": [
        "dev",
        "Default",
        "LoadTest"
      ]
    },
    "AccountName": {
      "Description": "Name for the current AWS Account",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "ResourceBucketName": {
      "Description": "CloudFormation Resources S3 Bucket Name",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-z][-a-z0-9]*$"
    },
    "RootDomain": {
      "Description": "Root DNS Domain Name",
      "Type": "String"
    },
    "PublicRegionZone": {
      "Description": "The Region Hosted Zone Id",
      "Type": "AWS::Route53::HostedZone::Id"
    },
    "VPCStackName": {
      "Description": "Name of an active CloudFormation stack that contains the networking resources that will be used in this stack.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "WindowsVersion": {
      "Description": "Windows Server Version",
      "Type": "String",
      "Default": "Windows2012r2",
      "AllowedValues": [
        "Windows2012r2"
      ],
      "ConstraintDescription": "must be a valid Windows Version"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "Default": "m1.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AWSRegion2AMI": {
      "us-east-1": {
        "Windows2008r2": "ami-3bd17a50",
        "Windows2012r2": "ami-e0e00f8d"
      },
      "us-west-2": {
        "Windows2008r2": "ami-59c3c969",
        "Windows2012r2": "ami-df8767bf"
      },
      "us-west-1": {
        "Windows2008r2": "ami-ede01ea9",
        "Windows2012r2": "ami-bf2dd3fb"
      },
      "eu-west-1": {
        "Windows2008r2": "ami-82e6b4f5",
        "Windows2012r2": "ami-1a92cf6d"
      },
      "eu-central-1": {
        "Windows2008r2": "ami-0a181f17",
        "Windows2012r2": "ami-86393e9b"
      },
      "ap-northeast-1": {
        "Windows2008r2": "ami-ac912aac",
        "Windows2012r2": "ami-b4ce74b4"
      },
      "ap-southeast-1": {
        "Windows2008r2": "ami-724a4420",
        "Windows2012r2": "ami-12737d40"
      },
      "ap-southeast-2": {
        "Windows2008r2": "ami-67aae95d",
        "Windows2012r2": "ami-7ddb9847"
      },
      "sa-east-1": {
        "Windows2008r2": "ami-6ddc5470",
        "Windows2012r2": "ami-89ff7794"
      },
      "cn-north-1": {
        "Windows2008r2": "ami-26d14d1f",
        "Windows2012r2": "ami-bcce5285"
      }
    }
  },
  "Conditions": {
    "IsDefault": {
      "Fn::Equals": [
        {
          "Ref": "Environment"
        },
        "Default"
      ]
    }
  },
  "Resources": {
    "RDGatewayGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "EIP"
      ],
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "1",
          "PauseTime": "PT0M30S"
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PublicSubnet0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PublicSubnet1"
            ]
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ1"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "RDGateway"
        },
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "VPC",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "RDGateway": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "roleName": {
              "Ref": "RDGWInstanceRole"
            }
          }
        },
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "rename",
              "installRDS",
              "logs",
              "finalize"
            ]
          },
          "setup": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.RDGateway.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c config -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r RDGateway",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Configure-RDGW.ps1": {
                "authentication": "S3AccessCreds",
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      "https://s3.amazonaws.com/",
                      {
                        "Ref": "ResourceBucketName"
                      },
                      "/Configure-RDGW.ps1"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Associate-EIP.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$instanceid = (New-Object System.Net.WebClient).DownloadString(\"http://169.254.169.254/latest/meta-data/instance-id\")\n",
                      "Register-EC2Address -InstanceId $instanceid -AllocationId ",
                      {
                        "Fn::GetAtt": [
                          "EIP",
                          "AllocationId"
                        ]
                      },
                      " -Region ",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]
                  ]
                }
              }
            },
            "commands": {},
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "rename": {
            "commands": {
              "1-execute-powershell-script-RenameComputer": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe Rename-Computer -NewName ",
                      {
                        "Ref": "ServiceName"
                      },
                      " -Restart"
                    ]
                  ]
                },
                "waitAfterCompletion": "forever"
              }
            }
          },
          "installRDS": {
            "commands": {
              "1-install-rds": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\""
                    ]
                  ]
                }
              },
              "2-configure-rdgw": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe -ExecutionPolicy RemoteSigned",
                      " C:\\cfn\\scripts\\Configure-RDGW.ps1 -ServerFQDN ",
                      {
                        "Ref": "ServiceName"
                      },
                      ".",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".",
                      {
                        "Ref": "RootDomain"
                      },
                      " -DomainNetBiosName BUILTIN -GroupName administrators -UserName Administrator"
                    ]
                  ]
                }
              },
              "3-assoc-eip": {
                "command": "powershell.exe -ExecutionPolicy RemoteSigned C:\\cfn\\scripts\\Associate-EIP.ps1"
              }
            }
          },
          "logs": {
            "files": {
              "C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\AWS.EC2.Windows.CloudWatch.json": {
                "authentication": "S3AccessCreds",
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      "https://s3.amazonaws.com/",
                      {
                        "Ref": "ResourceBucketName"
                      },
                      "/AWS.EC2.Windows.CloudWatch.json"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Enable-Plugins.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$EC2SettingsFile=\"C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\Config.xml\"\n",
                      "$xml = [xml](get-content $EC2SettingsFile)\n",
                      "$xmlElement = $xml.get_DocumentElement()\n",
                      "$xmlElementToModify = $xmlElement.Plugins\n",
                      "\n",
                      "foreach ($element in $xmlElementToModify.Plugin)\n",
                      "{\n",
                      "    if ($element.name -eq \"AWS.EC2.Windows.CloudWatch.PlugIn\")\n",
                      "    {\n",
                      "        $element.State=\"Enabled\"\n",
                      "    }\n",
                      "    if ($element.name -eq \"Ec2EventLog\")\n",
                      "    {\n",
                      "        $element.State=\"Enabled\"\n",
                      "    }\n",
                      "    if ($element.name -eq \"Ec2SetPassword\")\n",
                      "    {\n",
                      "        $element.State=\"Enabled\"\n",
                      "    }\n",
                      "}\n",
                      "$xml.Save($EC2SettingsFile)\n"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "1-config-logs": {
                "command": "powershell.exe -ExecutionPolicy RemoteSigned C:\\cfn\\scripts\\Enable-Plugins.ps1"
              },
              "2-ec2config-stop": {
                "command": "powershell.exe net stop ec2config"
              },
              "3-ec2config-start": {
                "command": "powershell.exe net start ec2config"
              }
            }
          },
          "finalize": {
            "commands": {
              "1-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 \"",
                      {
                        "Ref": "RDGWWaitHandle"
                      },
                      "\""
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceMonitoring": true,
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegion2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "WindowsVersion"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "RDGWInstanceProfile"
        },
        "SecurityGroups": [
          {
            "Ref": "RDGWSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>\n",
                "cfn-init.exe -v -c config -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r RDGateway",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "</script>\n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeSize": "50",
              "VolumeType": "gp2"
            }
          }
        ]
      }
    },
    "RDGWSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable RDP access from the Internet",
        "VpcId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "VPCId"
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": {
              "Fn::GetAtt": [
                "VPCInfo",
                "VPCCidrBlock"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "RDGWInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "RDGWInstanceRole"
          }
        ]
      }
    },
    "RDGWInstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "RDGatewayInstanceProfile",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "CloudWatchLogs",
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "UpdateEIP",
              "Effect": "Allow",
              "Action": [
                "ec2:AssociateAddress"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "CloudFormationResourcesAccess",
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "ResourceBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RDGWInstanceRole"
          }
        ]
      }
    },
    "RDGWInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "RDGWWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "RDGateway",
      "Properties": {
        "Handle": {
          "Ref": "RDGWWaitHandle"
        },
        "Timeout": "3000"
      }
    },
    "RDGWWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "PublicRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "PublicRegionZone"
        },
        "Comment": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "ServiceName"
              }
            ]
          ]
        },
        "Name": {
          "Fn::If": [
            "IsDefault",
            {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "AccountName"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "RootDomain"
                  }
                ]
              ]
            },
            {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AccountName"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "RootDomain"
                  }
                ]
              ]
            }
          ]
        },
        "Type": "A",
        "TTL": "300",
        "ResourceRecords": [
          {
            "Ref": "EIP"
          }
        ]
      }
    },
    "PrivateRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "PrivateHostedZone"
          ]
        },
        "Comment": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "ServiceName"
              }
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "RootDomain"
              }
            ]
          ]
        },
        "Type": "A",
        "TTL": "300",
        "ResourceRecords": [
          {
            "Ref": "EIP"
          }
        ]
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VPCInfo": {
      "Type": "Custom::VPCInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LookupStackOutputs",
            "Arn"
          ]
        },
        "StackName": {
          "Ref": "VPCStackName"
        }
      }
    },
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Description": "Lookup CloudFormation Stack Outputs",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "cfn-stack-lookup",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "SecurityGroup": {
      "Value": {
        "Ref": "RDGWSecurityGroup"
      },
      "Description": "Bastion Security Group"
    },
    "RootCert1": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "c:\\",
            {
              "Ref": "ServiceName"
            },
            ".cer"
          ]
        ]
      },
      "Description": "Location of the root SSL certificate on the first Remote Desktop Gateway (RDGW1) in AZ1"
    }
  }
}