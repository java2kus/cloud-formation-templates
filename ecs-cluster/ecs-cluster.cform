{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "EC2 Container Service Cluster",
  "Parameters": {
    "ServiceName": {
      "Description": "Becomes the short hostname used in DNS, Naming, Comments, and other things.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default": "ECS"
    },
    "Environment": {
      "Description": "The Runtime Environment",
      "Type": "String",
      "Default": "Default",
      "AllowedValues": [
        "dev",
        "Default",
        "LoadTest"
      ]
    },
    "VPCStackName": {
      "Description": "Name of an active CloudFormation stack that contains the networking resources that will be used in this stack.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "ClusterName": {
      "Description": "ECS Cluster Name",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "DesiredCapacity": {
      "Type": "Number",
      "Default": "1",
      "Description": "Number of instances to launch in your ECS cluster"
    },
    "MaxSize": {
      "Type": "Number",
      "Default": "3",
      "Description": "Maximum number of instances that can be launched in your ECS cluster"
    },
    "DataVolumeSnapshotId": {
      "Type": "String",
      "Description": "SnapshotId for Data Volume. Leave Blank for No Volume."
    },
    "DataVolumeSize": {
      "Type": "Number",
      "Default": "10",
      "Description": "Size of attaced EBS Volume used for Data Storage"
    },
    "DataVolumeType": {
      "Description": "The Type of the Data Volume",
      "Type": "String",
      "Default": "standard",
      "AllowedValues": [
        "standard",
        "io1",
        "gp2"
      ]
    },
    "DataVolumeDeleteOnTermination": {
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    }
  },
  "Mappings": {
    "AWSRegionMap": {
      "us-east-1": {
        "AMI": "ami-2b3b6041"
      },
      "us-west-2": {
        "AMI": "ami-ac6872cd"
      },
      "us-west-1": {
        "AMI": "ami-bfe095df"
      },
      "eu-west-1": {
        "AMI": "ami-03238b70"
      },
      "eu-central-1": {
        "AMI": "ami-e1e6f88d"
      },
      "ap-northeast-1": {
        "AMI": "ami-fb2f1295"
      },
      "ap-southeast-1": {
        "AMI": "ami-c78f43a4"
      },
      "ap-southeast-2": {
        "AMI": "ami-43547120"
      },
      "sa-east-1": {
        "AMI": "ami-2b3b6041"
      },
      "cn-north-1": {
        "AMI": "ami-2b3b6041"
      }
    }
  },
  "Conditions": {
    "IsDataVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DataVolumeSnapshotId"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "Instances"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "ScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "Instances"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "Instances"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "Instances"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "Instances": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PrivateSubnet0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PrivateSubnet1"
            ]
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ1"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "Instance"
        },
        "MinSize": "1",
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "ECS",
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "ClusterName"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "Instance": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "01_add_instance_to_cluster": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "echo ECS_CLUSTER=",
                      {
                        "Ref": "Cluster"
                      },
                      " >> /etc/ecs/ecs.config"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.Instances.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource Instances ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": "50"
            }
          },
          {
            "Fn::If": [
              "IsDataVolume",
              {
                "DeviceName": "/dev/xvdf",
                "Ebs": {
                  "SnapshotId": {
                    "Ref": "DataVolumeSnapshotId"
                  },
                  "DeleteOnTermination": {
                    "Ref": "DataVolumeDeleteOnTermination"
                  },
                  "VolumeSize": {
                    "Ref": "DataVolumeSize"
                  },
                  "VolumeType": {
                    "Ref": "DataVolumeType"
                  }
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Instance ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "sudo yum update -y",
                "\n",
                "sudo yum install -y awslogs",
                "\n",
                "sudo service awslogs start",
                "\n",
                "sudo chkconfig awslogs on",
                {
                  "Fn::If": [
                    "IsDataVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "\n",
                          "sudo mkfs -t ext4 /dev/xvdf",
                          "\n",
                          "sudo mkdir /volf",
                          "\n",
                          "sudo mount /dev/xvdf /volf"
                        ]
                      ]
                    },
                    "\n"
                  ]
                },
                "\n",
                "sudo service docker restart",
                "\n",
                "if (sudo status ecs | grep start); then (sudo stop ecs) fi;",
                "\n",
                "sudo start ecs",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Instances ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ecs-instance",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ecs:CreateCluster",
                "ecs:RegisterContainerInstance",
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Submit*",
                "ecs:Poll",
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetAuthorizationToken"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "VPCId"
          ]
        },
        "GroupDescription": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "Environment"
              },
              {
                "Ref": "ClusterName"
              },
              "Instance"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Fn::GetAtt": [
                "VPCInfo",
                "VPCCidrBlock"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "ClusterName"
                  },
                  "Instance"
                ]
              ]
            }
          }
        ]
      }
    },
    "VPCInfo": {
      "Type": "Custom::VPCInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LookupStackOutputs",
            "Arn"
          ]
        },
        "StackName": {
          "Ref": "VPCStackName"
        }
      }
    },
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Description": "Lookup CloudFormation Stack Outputs",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "cfn-stack-lookup",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "Cluster": {
      "Value": {
        "Ref": "Cluster"
      },
      "Description": "The CloudFormation Generated ECS Cluster Name"
    },
    "InstanceSecurityGroupId": {
      "Value": {
        "Fn::GetAtt": [
          "InstanceSecurityGroup",
          "GroupId"
        ]
      },
      "Description": "The SecurityGroup Id for the ECS Instances"
    },
    "VPCId": {
      "Value": {
        "Fn::GetAtt": [
          "VPCInfo",
          "VPCId"
        ]
      },
      "Description": "The Id of the ECS VPC"
    },
    "PrivateSubnet0": {
      "Value": {
        "Fn::GetAtt": [
          "VPCInfo",
          "PrivateSubnet0"
        ]
      },
      "Description": "VPC Private Subnet0 Id"
    },
    "PrivateSubnet1": {
      "Value": {
        "Fn::GetAtt": [
          "VPCInfo",
          "PrivateSubnet1"
        ]
      },
      "Description": "VPC Private Subnet1 Id"
    },
    "PublicSubnet0": {
      "Value": {
        "Fn::GetAtt": [
          "VPCInfo",
          "PublicSubnet0"
        ]
      },
      "Description": "VPC Public Subnet0 Id"
    },
    "PublicSubnet1": {
      "Value": {
        "Fn::GetAtt": [
          "VPCInfo",
          "PublicSubnet1"
        ]
      },
      "Description": "VPC Public Subnet1 Id"
    },
    "PrivateHostedZone": {
      "Value": {
        "Fn::GetAtt": [
          "VPCInfo",
          "PrivateHostedZone"
        ]
      },
      "Description": "The Private HostedZone Id of the ECS VPC"
    }
  }
}