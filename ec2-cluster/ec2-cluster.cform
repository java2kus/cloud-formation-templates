{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "EC2 AutoScale Cluster",
  "Parameters": {
    "ServiceName": {
      "Description": "Becomes the short hostname used in DNS, Naming, Comments, and other things.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "Environment": {
      "Description": "The Runtime Environment",
      "Type": "String",
      "Default": "Default",
      "AllowedValues": [
        "Default",
        "LoadTest"
      ]
    },
    "AccountName": {
      "Description": "Name for the current AWS Account",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "AMI": {
      "Description": "Amazon Machine Image Id Used to Launch Cluster",
      "Type": "AWS::EC2::Image::Id"
    },
    "InstancePort": {
      "Description": "Instance HTTP Listen Port",
      "Type": "Number",
      "Default": "80"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "kevinz",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "RootVolumeSnapshotId": {
      "Type": "String",
      "Description": "SnapshotId for Root Volume. You can leave blank, unless RootVolumeDeleteOnTermination is true"
    },
    "RootVolumeDeleteOnTermination": {
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "DataVolumeSnapshotId": {
      "Type": "String",
      "Description": "SnapshotId for Data Volume. Leave Blank for No Volume."
    },
    "DataVolumeSize": {
      "Type": "Number",
      "ConstraintDescription": "EBS Data Volume Type"
    },
    "DataVolumeType": {
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "standard",
        "gp2"
      ],
      "ConstraintDescription": "EBS Data Volume Type"
    },
    "DataVolumeDeleteOnTermination": {
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "MinClusterSize": {
      "Description": "Minimum AutoScale Group Size",
      "Type": "Number",
      "Default": "1"
    },
    "MaxClusterSize": {
      "Description": "Maximum AutoScale Group Size",
      "Type": "Number",
      "Default": "5"
    },
    "DesiredCapacity": {
      "Description": "Initial Desired Cluster Size",
      "Type": "Number",
      "Default": "2"
    },
    "PublicRootZone": {
      "Description": "The Root Hosted Zone Id",
      "Type": "AWS::Route53::HostedZone::Id"
    },
    "PublicRegionZone": {
      "Description": "The Region Hosted Zone Id",
      "Type": "AWS::Route53::HostedZone::Id"
    },
    "AdminPort": {
      "Description": "This should be 22 for Linux and 3389 for Windows",
      "Type": "Number",
      "Default": "22"
    },
    "AdminSecurityGroupId": {
      "Description": "The SecurityGroup to Access From. Should be the RDP/SSH Gateway Group Id. If Blank Will Enable Access from the VPC CIDR",
      "Type": "String"
    },
    "VPCStackName": {
      "Description": "Name of an active CloudFormation stack that contains the networking resources that will be used in this stack.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "ResourceBucketName": {
      "Description": "CloudFormation Resources S3 Bucket Name",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-z][-a-z0-9]*$"
    },
    "DataLakeBucketName": {
      "Description": "DataLake S3 Bucket Name",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-z][-a-z0-9]*$"
    },
    "RootDomain": {
      "Description": "Root DNS Domain Name",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "Default": "m1.large",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AWSRegionMap": {
      "us-east-1": {
        "AWSAccountId": "127311923021"
      },
      "us-west-2": {
        "AWSAccountId": "797873946194"
      },
      "us-west-1": {
        "AWSAccountId": "027434742980"
      },
      "eu-west-1": {
        "AWSAccountId": "156460612806"
      },
      "eu-central-1": {
        "AWSAccountId": "054676820928"
      },
      "ap-northeast-1": {
        "AWSAccountId": "582318560864"
      },
      "ap-southeast-1": {
        "AWSAccountId": "114774131450"
      },
      "ap-southeast-2": {
        "AWSAccountId": "797873946194"
      },
      "sa-east-1": {
        "AWSAccountId": "507241528517"
      },
      "cn-north-1": {
        "AWSAccountId": "638102146993"
      }
    }
  },
  "Conditions": {
    "IsDefault": {
      "Fn::Equals": [
        {
          "Ref": "Environment"
        },
        "Default"
      ]
    },
    "HasAdminSecurityGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdminSecurityGroupId"
            },
            ""
          ]
        }
      ]
    },
    "IsRootVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "RootVolumeSnapshotId"
            },
            ""
          ]
        }
      ]
    },
    "IsDataVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DataVolumeSnapshotId"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "PublicRootDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "PublicRootZone"
        },
        "Comment": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              "Root"
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "RootDomain"
              }
            ]
          ]
        },
        "SetIdentifier": {
          "Ref": "ServiceName"
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "TTL": "900",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Ref": "PublicDNS"
          }
        ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PublicSubnet0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PublicSubnet1"
            ]
          }
        ],
        "CrossZone": true,
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": {
              "Ref": "InstancePort"
            },
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                {
                  "Ref": "InstancePort"
                },
                "/"
              ]
            ]
          },
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "7"
        },
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          }
        ],
        "AccessLoggingPolicy": {
          "S3BucketName": {
            "Ref": "DataLakeBucketName"
          },
          "S3BucketPrefix": {
            "Fn::Join": [
              "/",
              [
                "ELB",
                {
                  "Ref": "ServiceName"
                }
              ]
            ]
          },
          "Enabled": "true",
          "EmitInterval": "5"
        }
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "Cluster"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "Cluster"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "Cluster"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "ScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "Cluster"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "Cluster": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "5",
          "MinInstancesInService": "1",
          "PauseTime": "PT0M30S"
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PrivateSubnet0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PrivateSubnet1"
            ]
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ1"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "Instance"
        },
        "LoadBalancerNames": [
          {
            "Ref": "LoadBalancer"
          }
        ],
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": 300,
        "MinSize": {
          "Ref": "MinClusterSize"
        },
        "MaxSize": {
          "Ref": "MaxClusterSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "Instance": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment1": "Setup and Install AWS Logs",
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "roleName": {
              "Ref": "Role"
            }
          }
        },
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Install": [
              "setup",
              "logs"
            ]
          },
          "setup": {
            "packages": {
              "yum": {
                "ec2-net-utils": []
              }
            }
          },
          "logs": {
            "files": {
              "/awslogs-agent-setup.py": {
                "source": "https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py",
                "mode": "000754",
                "owner": "root",
                "group": "root"
              },
              "/log-agent.cfg": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file = /var/awslogs/state/agent-state\n",
                      "\n",
                      "[/var/log/messages]\n",
                      "file = /var/log/messages\n",
                      "log_group_name = /var/log/messages\n",
                      "log_stream_name = {instance_id}\n",
                      "datetime_format = %b %d %H:%M:%S\n",
                      "\n"
                    ]
                  ]
                },
                "mode": "000754",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "1-logs": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/awslogs-agent-setup.py -n -c /log-agent.cfg -r ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Ref": "AMI"
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "BlockDeviceMappings": [
          {
            "Fn::If": [
              "IsRootVolume",
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "SnapshotId": {
                    "Ref": "RootVolumeSnapshotId"
                  },
                  "DeleteOnTermination": {
                    "Ref": "RootVolumeDeleteOnTermination"
                  }
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "IsDataVolume",
              {
                "DeviceName": "/dev/xvdf",
                "Ebs": {
                  "SnapshotId": {
                    "Ref": "DataVolumeSnapshotId"
                  },
                  "DeleteOnTermination": {
                    "Ref": "DataVolumeDeleteOnTermination"
                  },
                  "VolumeSize": {
                    "Ref": "DataVolumeSize"
                  },
                  "VolumeType": {
                    "Ref": "DataVolumeType"
                  }
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource Instance ",
                "         --configsets Install ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ecs-instance",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "VPCId"
          ]
        },
        "GroupDescription": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "Environment"
              },
              "Instance"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Ref": "AdminPort"
            },
            "ToPort": {
              "Ref": "AdminPort"
            },
            "SourceSecurityGroupId": {
              "Fn::If": [
                "HasAdminSecurityGroup",
                {
                  "Ref": "AdminSecurityGroupId"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "CidrIp": {
              "Fn::If": [
                "HasAdminSecurityGroup",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "Fn::GetAtt": [
                    "VPCInfo",
                    "VPCCidrBlock"
                  ]
                }
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Ref": "InstancePort"
            },
            "ToPort": {
              "Ref": "InstancePort"
            },
            "SourceSecurityGroupId": {
              "Ref": "ELBSecurityGroup"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  },
                  "Instance"
                ]
              ]
            }
          }
        ]
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "VPCId"
          ]
        },
        "GroupDescription": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "Environment"
              },
              "ELB"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  },
                  "ELB"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "PublicRegionZone"
        },
        "Comment": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "Environment"
              }
            ]
          ]
        },
        "Name": {
          "Fn::If": [
            "IsDefault",
            {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "AccountName"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "RootDomain"
                  }
                ]
              ]
            },
            {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AccountName"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "RootDomain"
                  }
                ]
              ]
            }
          ]
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "CanonicalHostedZoneNameID"
            ]
          },
          "EvaluateTargetHealth": true
        }
      }
    },
    "PrivateDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "PrivateHostedZone"
          ]
        },
        "Comment": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              "ELB"
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "RootDomain"
              }
            ]
          ]
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "CanonicalHostedZoneNameID"
            ]
          },
          "EvaluateTargetHealth": true
        }
      }
    },
    "VPCInfo": {
      "Type": "Custom::VPCInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LookupStackOutputs",
            "Arn"
          ]
        },
        "StackName": {
          "Ref": "VPCStackName"
        }
      }
    },
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Lookup CloudFormation Stack Outputs",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LookupLambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "LookupLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "cfn-lookup-stack-outputs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {}
}