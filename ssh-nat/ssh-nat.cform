{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Linux Multi AZ High Availability Single Instance SSH with NAT",
  "Parameters": {
    "ServiceName": {
      "Description": "Becomes the short hostname used in DNS, Naming, Comments, and other things.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default": "SSH"
    },
    "Environment": {
      "Description": "The Runtime Environment",
      "Type": "String",
      "Default": "Default",
      "AllowedValues": [
        "dev",
        "Default",
        "LoadTest"
      ]
    },
    "AccountName": {
      "Description": "Name for the current AWS Account",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "ResourceBucketName": {
      "Description": "CloudFormation Resources S3 Bucket Name",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-z][-a-z0-9]*$"
    },
    "RootDomain": {
      "Description": "Root DNS Domain Name",
      "Type": "String"
    },
    "PublicRegionZone": {
      "Description": "The Region Hosted Zone Id`",
      "Type": "AWS::Route53::HostedZone::Id",
      "Default": "Z1XYW16LLNZJF1"
    },
    "VPCStackName": {
      "Description": "Name of an active CloudFormation stack that contains the networking resources that will be used in this stack.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default": "VPC-Sandbox"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ssh",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "m1.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    },
    "Hostname": {
      "Description": "Simple domain name with out DNS suffix",
      "Type": "String",
      "Default": "ssh",
      "MinLength": "3",
      "MaxLength": "25",
      "AllowedPattern": "[a-zA-Z0-9]+\\.?.+"
    }
  },
  "Conditions": {
    "IsDefault": {
      "Fn::Equals": [
        {
          "Ref": "Environment"
        },
        "Default"
      ]
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "PV64": "ami-c02b04a8",
        "HVM64": "ami-b0210ed8",
        "HVMG2": "ami-303b1458"
      },
      "us-west-2": {
        "PV64": "ami-2dae821d",
        "HVM64": "ami-75ae8245",
        "HVMG2": "ami-69ae8259"
      },
      "us-west-1": {
        "PV64": "ami-67a54423",
        "HVM64": "ami-ada746e9",
        "HVMG2": "ami-7da94839"
      },
      "eu-west-1": {
        "PV64": "ami-aa8f28dd",
        "HVM64": "ami-748e2903",
        "HVMG2": "ami-00913777"
      },
      "ap-southeast-1": {
        "PV64": "ami-20e1c572",
        "HVM64": "ami-d6e1c584",
        "HVMG2": "ami-fabe9aa8"
      },
      "ap-northeast-1": {
        "PV64": "ami-21072820",
        "HVM64": "ami-35072834",
        "HVMG2": "ami-5dd1ff5c"
      },
      "ap-southeast-2": {
        "PV64": "ami-8b4724b1",
        "HVM64": "ami-fd4724c7",
        "HVMG2": "ami-e98ae9d3"
      },
      "sa-east-1": {
        "PV64": "ami-9d6cc680",
        "HVM64": "ami-956cc688",
        "HVMG2": "NOT_SUPPORTED"
      },
      "cn-north-1": {
        "PV64": "ami-a857c591",
        "HVM64": "ami-ac57c595",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "PV64": "ami-a03503bd",
        "HVM64": "ami-b43503a9",
        "HVMG2": "ami-b03503ad"
      }
    }
  },
  "Resources": {
    "AutoscaleGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "EIP"
      ],
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "1",
          "PauseTime": "PT0M30S"
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PublicSubnet0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "PublicSubnet1"
            ]
          }
        ],
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ0"
            ]
          },
          {
            "Fn::GetAtt": [
              "VPCInfo",
              "AZ1"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "VPC",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Stack",
            "Value": {
              "Ref": "ServiceName"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment1": "Install AWS Logs",
        "Comment2": "Register instance in DNS",
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "roleName": {
              "Ref": "InstanceRole"
            }
          }
        },
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Install": [
              "setup",
              "logs",
              "eni"
            ]
          },
          "setup": {
            "packages": {
              "yum": {
                "jq": [],
                "ec2-net-utils": []
              }
            }
          },
          "logs": {
            "files": {
              "/awslogs-agent-setup.py": {
                "source": "https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py",
                "mode": "000754",
                "owner": "root",
                "group": "root"
              },
              "/log-agent.cfg": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file = /var/awslogs/state/agent-state\n",
                      "\n",
                      "[/var/log/messages]\n",
                      "file = /var/log/messages\n",
                      "log_group_name = /var/log/messages\n",
                      "log_stream_name = {instance_id}\n",
                      "datetime_format = %b %d %H:%M:%S\n",
                      "\n"
                    ]
                  ]
                },
                "mode": "000754",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "1-logs": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/awslogs-agent-setup.py -n -c /log-agent.cfg -r ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "eni": {
            "commands": {
              "1-attach": {
                "command": {
                  "Fn::Join": [
                    ";\n",
                    [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "export AWS_DEFAULT_REGION=",
                            {
                              "Ref": "AWS::Region"
                            }
                          ]
                        ]
                      },
                      "id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)",
                      "mac=$(curl -s http://169.254.169.254/latest/meta-data/mac)",
                      "az=$(curl -s curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "aws ec2 associate-address --instance-id=$id --allocation-id=",
                            {
                              "Fn::GetAtt": [
                                "EIP",
                                "AllocationId"
                              ]
                            }
                          ]
                        ]
                      },
                      "eni=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/interface-id)",
                      "aws ec2 modify-network-interface-attribute --network-interface-id=$eni --no-source-dest-check",
                      "rtbs=$(aws ec2 describe-route-tables --filters Name=tag-value,Values=*PRIVATE)",
                      "rtbids=$(echo $rtbs | jq -r '.RouteTables[].RouteTableId')",
                      {
                        "Fn::Join": [
                          "\n",
                          [
                            "for rtbid in $rtbids; do ",
                            "exists=$(echo $rtbs | jq --arg rtbid $rtbid '.RouteTables[] | select(.RouteTableId == $rtbid).Routes[] | select(.DestinationCidrBlock? == \"0.0.0.0/0\") | any')",
                            "if [[ $exists == *\"true\"* ]]; then aws ec2 replace-route --destination-cidr-block=\"0.0.0.0/0\" --route-table-id=$rtbid --instance-id=$id; else aws ec2 create-route --route-table-id=$rtbid --destination-cidr-block=0.0.0.0/0 --instance-id=$id; fi",
                            "done"
                          ]
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceMonitoring": true,
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource LaunchConfiguration ",
                "         --configsets Install ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access from the Internet",
        "VpcId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "VPCId"
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Fn::GetAtt": [
                "VPCInfo",
                "VPCCidrBlock"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Fn::GetAtt": [
                "VPCInfo",
                "VPCCidrBlock"
              ]
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Fn::GetAtt": [
                "VPCInfo",
                "VPCCidrBlock"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ServiceName"
                  },
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "NatInstanceProfile",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "CloudWatchLogs",
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "UpdateRoutes",
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeRouteTables",
                "ec2:ReplaceRoute",
                "ec2:CreateRoute",
                "ec2:DescribeNetworkInterfaces",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:AssociateAddress"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "CloudFormationResourceBucketAccess",
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "ResourceBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "PublicRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "PublicRegionZone"
        },
        "Comment": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "Environment"
              }
            ]
          ]
        },
        "Name": {
          "Fn::If": [
            "IsDefault",
            {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "Hostname"
                  },
                  {
                    "Ref": "AccountName"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "RootDomain"
                  }
                ]
              ]
            },
            {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "Hostname"
                  },
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AccountName"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "RootDomain"
                  }
                ]
              ]
            }
          ]
        },
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Ref": "EIP"
          }
        ]
      }
    },
    "PrivateRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::GetAtt": [
            "VPCInfo",
            "PrivateHostedZone"
          ]
        },
        "Comment": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "Environment"
              }
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "Hostname"
              },
              {
                "Ref": "RootDomain"
              }
            ]
          ]
        },
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Ref": "EIP"
          }
        ]
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VPCInfo": {
      "Type": "Custom::VPCInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LookupStackOutputs",
            "Arn"
          ]
        },
        "StackName": {
          "Ref": "VPCStackName"
        }
      }
    },
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Description": "Lookup CloudFormation Stack Outputs",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "cfn-stack-lookup",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "Hostname": {
      "Value": {
        "Ref": "Hostname"
      },
      "Description": "Hostname chosen for NAT instance"
    }
  }
}